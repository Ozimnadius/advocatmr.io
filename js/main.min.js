//@prepros-append pages/common.js
//@prepros-append pages/sliders.js
//@prepros-append pages/index.js
//@prepros-append pages/maps.js
//@prepros-append pages/popups.js
// common.js
function getNumber(str) {
    return parseInt(str.replace(/\s/g, ''));
}

function number_format(number, decimals, dec_point, thousands_sep) {
    var i, j, kw, kd, km;
    if (isNaN(decimals = Math.abs(decimals))) {
        decimals = 2;
    }
    if (dec_point == undefined) {
        dec_point = ",";
    }
    if (thousands_sep == undefined) {
        thousands_sep = ".";
    }
    i = parseInt(number = (+number || 0).toFixed(decimals)) + "";
    if ((j = i.length) > 3) {
        j = j % 3;
    } else {
        j = 0;
    }
    km = (j ? i.substr(0, j) + thousands_sep : "");
    kw = i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands_sep);
    kd = (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : "");
    return km + kw + kd;
}

function imageResize(src) {
    $('img').not('.logo__img').attr('src', src);
}

// imageResize('https://loremflickr.com/320/440');

const wWidth = $(window).width();

const menu = $('.menu');

const wrapper = $('.wrapper');

$('.menu__close').on('click', function (e) {
    e.preventDefault();
    wrapper.removeClass('ovhidden');
    menu.removeClass('active');
});

$('.menu__open').on('click', function (e) {
    e.preventDefault();
    wrapper.addClass('ovhidden');
    menu.addClass('active');
});

if (wWidth < 768) {
    const menu = $('.menu'),
        menuRight = $('.menu__right'),
        menuLeft = $('.menu__left');

    $('.mnav__item_link').on('click', function (e) {
        e.preventDefault();
        menuLeft.removeClass('active');
        menuRight.addClass('active');
    });

    $('.menu__back').on('click', function (e) {
        e.preventDefault();
        menuRight.removeClass('active');
        menuLeft.addClass('active');
    });

}
//sliders.js
$(function () {

    let imediaSlider = new Swiper('.imedia__slider-container', {
        watchOverflow: true,
        spaceBetween: 20,
        breakpoints: {
            // when window width is >= 320px
            320: {
                slidesPerView: 'auto',
                spaceBetween: 10,
            },
            // when window width is >= 768px
            768: {
                slidesPerView: 'auto',
                spaceBetween: 20,
            },
            // when window width is >= 1240px
            1240: {
                slidesPerView: 4,
            }
        }
    });

    let ipartnersSlider = new Swiper('.slider__container', {
        slidesPerView: 3,
        spaceBetween: 40,
        navigation: {
            nextEl: '.slider__next',
            prevEl: '.slider__prev',
        },
        breakpoints: {
            // when window width is >= 320px
            320: {
                slidesPerView: 1,
            },
            // when window width is >= 790px
            768: {
                slidesPerView: 1,
            },
            // when window width is >= 1240px
            1240: {
                slidesPerView: 3,
            }
        }
    });

    let acertsSlider = new Swiper('.acerts__container', {
        slidesPerView: 2,
        spaceBetween: 110,
        watchOverflow: true,
        navigation: {
            nextEl: '.acerts__next',
            prevEl: '.acerts__prev',
        },
        breakpoints: {
            // when window width is >= 320px
            320: {
                spaceBetween: 20,
                slidesPerView: 1,
            },
            // when window width is >= 790px
            768: {
                spaceBetween: 20,
                slidesPerView: 2,
            },
            // when window width is >= 1240px
            1240: {
                spaceBetween: 110,
            }
        }
    });

});
//index.js
$(function () {

    if (wWidth >= 768) {
        $('.inews__list').masonry({
            itemSelector: '.inew',
        });
    }

    let ipagSlider = new Swiper('.ipag__container', {
        slidesPerView: 'auto',
        slideToClickedSlide: true,
        watchSlidesVisibility: true,
        loop: true,
        navigation: {
            nextEl: '.inews__next',
            prevEl: '.inews__prev',
        },
        on: {
            slideChange: function () {
                let slide = this.slides[this.activeIndex],
                    id = slide.dataset.id,
                    slides = $(inewsSlider.slides),
                    inewsSlide = slides.filter('[data-id="' + id + '"]'),
                    x = $.inArray(inewsSlide[0], slides);

                inewsSlider.slideTo(x);
            }
        }
    });

    let inewsSlider = new Swiper('.inews__slider-container', {
        spaceBetween: 0,
        slidesPerView: 1,
        allowTouchMove: false
    });

    const headerFixed = $('.header__fixed_main'),
        headerMain = $('.header__main');

    if (headerFixed.length > 0) {
        $(window).on('scroll', function (e) {
            let height = headerMain.outerHeight(),
                scrollTop = $(this).scrollTop();

            if (scrollTop> height){
                headerFixed.addClass('active');
            } else {
                headerFixed.removeClass('active');
            }

        });
    }


});
//maps.js

/*YANDEX*/
$(function () {
    ymaps.ready(init);
    var myMap,
        myPlacemark,
        myPin;

    function init() {

        if ($('#imap').length) {
            var center = [55.75968406898679,37.574857499999965];
            // if ($(window).width() < 576) {
            //     center = [55.609501798660396, 37.61325538360591];
            // }

            myMap = new ymaps.Map("imap", {
                center: center,
                zoom: 17,
                controls: []
            });


            myMap.behaviors.disable(['scrollZoom', 'drag']);
            // myMap.controls.remove('geolocationControl')
            //     .remove('searchControl')
            //     .remove('trafficControl')
            //     .remove('typeSelector')
            //     .remove('fullscreenControl')
            //     .remove('zoomControl')
            //     .remove('rulerControl');
            // myMap.controls.add('zoomControl');

            myPin = new ymaps.GeoObjectCollection({}, {
                // iconLayout: 'default#image',
                // iconImageHref: '/img/icons/map-marker.svg',
                // iconImageSize: [46, 57],
                // iconImageOffset: [-15, -55]
            });


            myPlacemark = new ymaps.Placemark([55.75968406898679,37.574857499999965], {
                    balloonContentHeader: "Матвеева и партнеры",
                    balloonContentBody: "Квалифицированная юридическая помощь",
                    balloonContentFooter: "Москва, ул. Дружинниковская, 15 (киноцентр на Красной Пресне)",
                    hintContent: "advokatmr.ru"
                },
                {
                    iconLayout: 'default#image',
                    iconImageHref: '/images/icons/map-pin.svg',
                    iconImageSize: [60, 68],
                    iconImageOffset: [-30, -34]
                    // preset: 'islands#redGlyphIcon'
                });


            myPin.add(myPlacemark);
            myMap.geoObjects.add(myPin);
        }
    }
});
/*END YANDEX*/
//popups.js
const popup = $('.popup'),
    popupWrapper = popup.find('.popup__wrapper');

$.validator.methods.tel = function (value, element) {
    let re = new RegExp(/\d/g),
        str = value.match(re);

    if (str.length == 11) {
        return true;
    } else {
        return false;
    }
};

const formsData = {
    '1': {
        href: 'ajax.php',
        title: 'Задать вопрос',
        sub: 'Мы с радостью ответим на интересующие вопросы и поможем найти оптимальное решение ',
        fields: [
            {
                title: 'ФИО*',
                type: 'text',
                name: 'name',
                placeholder: 'Ваше Имя'
            },
            {
                title: 'Номер*',
                type: 'tel',
                name: 'tel',
                placeholder: '+7(__) ___-__-__'
            },
            {
                title: 'E-mail',
                type: 'email',
                name: 'email',
                placeholder: 'Ваш email'
            },
            {
                title: 'Напишите свой вопрос',
                type: 'textarea',
                name: 'comment',
                placeholder: 'Ваше сообщение'
            }
        ]
    },
    '2': {
        href: 'ajax.php',
        title: 'Заказать звонок',
        sub: 'Укажите ваше имя и контактный номер и наши специалисты позвонят Вам',
        fields: [
            {
                title: 'ФИО*',
                type: 'text',
                name: 'name',
                placeholder: 'Ваше Имя'
            },
            {
                title: 'Номер*',
                type: 'tel',
                name: 'tel',
                placeholder: '+7(__) ___-__-__'
            },
            {
                title: 'Комментарий',
                type: 'textarea',
                name: 'comment',
                placeholder: 'Ваше сообщение'
            }
        ]
    },
    '3': {
        href: 'ajax.php',
        title: 'Получить консультацию',
        sub: 'Укажите ваше имя и контактный номер и наши специалисты позвонят Вам',
        fields: [
            {
                title: 'ФИО*',
                type: 'text',
                name: 'name',
                placeholder: 'Ваше Имя'
            },
            {
                title: 'Номер*',
                type: 'tel',
                name: 'tel',
                placeholder: '+7(__) ___-__-__'
            },
            {
                title: 'Комментарий',
                type: 'textarea',
                name: 'comment',
                placeholder: 'Ваше сообщение'
            }
        ]
    },
};

function Form(settings) {
    this.popup = popup;
    this.wrapper = popupWrapper;
    this.template = $(tmpl.content).find('.form');
    this.form = this.template.clone();

    let that = this;

    this.init = function () {
        let title = that.form.find('.form__title'),
            sub = that.form.find('.form__sub'),
            hidden = that.form.find('.form__hidden');

        constructFields(settings.fields);
        that.form.attr('action', settings.href);
        title.text(settings.title);
        sub.text(settings.sub);
        hidden.val(settings.title);

        that.wrapper.html(that.form);

        that.popup.addClass('active');

        that.form.validate(
            {
                rules: {
                    name: "required",
                    tel: "required"
                },
                messages: {
                    name: "Необходимо указать Ваше имя",
                    tel: "Необходимо указать номер телефона"
                },
                submitHandler: function (form) {
                    let data = $(form).serialize(),
                        url = $(form).attr('action');

                    $.ajax({
                        dataType: "json",
                        type: "POST",
                        url: url,
                        data: data,
                        success: function (result) {
                            if (result.status) {
                                popupWrapper.html(result.html)
                            } else {
                                alert('Что-то пошло не так, попробуйте еще раз!!!');
                            }
                        },
                        error: function (result) {
                            alert('Что-то пошло не так, попробуйте еще раз!!!');
                        }
                    });
                },
            }
        );
        that.form.find('input[type=tel]').mask('+7 (999) 999-99-99');
    };

    function constructFields(params) {
        let fields = that.form.find('.form__fields').html('');
        params.forEach(function (item, i, arr) {
            fields.append(constructField(item));
        });

        return fields;
    }

    function constructField(params) {
        let field = getField(params.type),
            title = field.find('.form__field-title'),
            input = field.find('.form__field-input');
        title.text(params.title);
        input.attr('type', params.type);
        input.attr('name', params.name);
        input.attr('placeholder', params.placeholder);

        return field;
    }

    function getField(type) {
        let field = '';
        if (type === 'textarea') {
            field = $(that.template.find('.tmplArea')[0].cloneNode(true));
        } else {
            field = $(that.template.find('.tmplField')[0].cloneNode(true));
        }
        return field;
    }


}

$('body').on('click', '.jsCloseForm', function () {
    popup.removeClass('active');
    // wrapper.removeClass('ovhidden');
});

$('.jsCallback').on('click', function (e) {
    e.preventDefault();
    let id = $(this).data('id') || '1';

    // wrapper.addClass('ovhidden');

    let newForm = new Form(formsData[id]).init();
});


//# sourceMappingURL=main.min.js.map